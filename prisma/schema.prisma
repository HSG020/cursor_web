// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js 必需的表
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 用户订阅信息
  subscription   Subscription?
  
  // 关联表
  accounts       Account[]
  sessions       Session[]
  transcriptions Transcription[]
  usageRecords   UsageRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 订阅计划
model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  planType          String   // "free", "professional", "enterprise"
  status            String   // "active", "canceled", "past_due"
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 转录记录
model Transcription {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  fileSize    Int
  duration    Float    // 音频时长（秒）
  language    String   // 音频语言
  outputLang  String   // 输出语言
  status      String   // "processing", "completed", "failed"
  transcript  String?  // 转录结果
  fileUrl     String?  // 原始文件URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 使用记录
model UsageRecord {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "transcription"
  amount    Float    // 使用量（分钟数）
  date      DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}
